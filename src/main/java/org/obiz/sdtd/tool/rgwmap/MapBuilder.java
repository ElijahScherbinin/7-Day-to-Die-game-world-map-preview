/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.obiz.sdtd.tool.rgwmap;

import org.obiz.sdtd.tool.rgwmap.parts.Icons;
import org.obiz.sdtd.tool.rgwmap.parts.World;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.xml.stream.XMLStreamException;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.*;
import java.nio.file.Path;
import java.util.*;
import java.util.List;
import java.util.stream.Collectors;

import static org.obiz.sdtd.tool.rgwmap.parts.DTMHeights.DTM_RAW;

public class MapBuilder {

    private static final int MEM_EXPECTED = 512 * 1024 * 1024;
    private World world;
    private ConsoleWindow consoleWindow = null;
    public static final int downScale = 2; //2 - better definition
    private float gamma = 5;

    //    private final  int MAP_IMAGE_TYPE = BufferedImage.TYPE_USHORT_555_RGB;
    public final static int MAP_IMAGE_TYPE = BufferedImage.TYPE_INT_RGB;
    private boolean applyGammaCorrection = true;
    private int waterLine;
    private boolean doBlureBiomes = true;

    //fixed object sized (autoscaled)
    public static final int i10 = 10 / (downScale);
    public static final int i5 = i10 / 2;
    public static final int i20 = 2 * i10;
    public static final int i40 = 4 * i10;
    public static final int i45 = (9 * i10) / 2;
    public static final int i160 = 16 * i10;
    public static final int i200 = 20 * i10;
    public static final int i250 = 25 * i10;

    static int fileNum = 1;

    private static long prevLogTime;
    private static String lastFileName;

    public static boolean INVERT_MOUSE = false;
    public MapBuilder(String path) {
        prevLogTime = System.currentTimeMillis();
        try {
            consoleWindow = new ConsoleWindow();
            Path choosenPath = showFolderChooser(path);
            world = new World(choosenPath);
        } catch (IOException | URISyntaxException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        //TODO command line options
        INVERT_MOUSE = (args.length==1 && args[0].equals("-m"));
        String path = ".";

        if(INVERT_MOUSE && args.length==2) {
            path = args[1];
        }

        if(!INVERT_MOUSE && args.length==1) {
            path = args[0];
        }

        //get runtime memory information
        Runtime runtime = Runtime.getRuntime();
        long freeMemory = runtime.freeMemory();
        long totalMemory = runtime.totalMemory();
        long maxMemory = runtime.maxMemory();
        System.out.println("totalMemory = " + totalMemory);
        System.out.println("freeMemory = " + freeMemory);
        System.out.println("maxMemory = " + maxMemory);

        if(maxMemory < MEM_EXPECTED) {
            System.out.println("TOO LITTLE");
            JOptionPane.showMessageDialog(null, "There is too little mem for me :(\nI'm trying to restart my self for grab much mem!","Not enough mem error", JOptionPane.ERROR_MESSAGE);
            String jarName = new File(MapBuilder.class.getProtectionDomain()
                    .getCodeSource()
                    .getLocation()
                    .getPath())
                    .getAbsolutePath();

            System.out.println("jarName = " + jarName);
            if(jarName.endsWith("jar")) {
                System.out.println("Do the magic!");

                try {
                    // re-launch the app itselft with VM option passed
                    Process p;
                    if(args.length>0) {
                        System.out.println("With args");
                        p = Runtime.getRuntime().exec(new String[]{"java", "-Xmx1024m", "-jar", jarName, args[0]});
                    } else {
                        System.out.println("Without args");
                        p = Runtime.getRuntime().exec(new String[]{"java", "-Xmx1024m", "-jar", jarName});
                    }
                    Thread.sleep(10);
                    System.exit(0);
                } catch (IOException ioe) {
                    ioe.printStackTrace();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            } else {
                //just die if it's running from IDE
                System.exit(-1);
            }
        } else {
            System.out.println("Enough mem! Let's work!");
        }

        new MapBuilder(path).build();
    }


    private void build() {
        try {
            Timer.startTimer("OverAll");
//            testShowMap();
//            if(true) return;
            //testGetSprite("bank");

            world.readAll(applyGammaCorrection, doBlureBiomes);

            log(    "\n------------------- All work done! ------------------- \n\n" +
                    "          Result map image: " + lastFileName + "\n\n" +
                    "------------------------------------------------------");
            Timer.stopTimer("OverAll");

            new PreviewFrame(
                    world.getBiomes().getiBiomes(),
                    //TODO use single Icons in whole app
                    new Icons().getIcons(),
                    world.getMapFolder()).setVisible(true);

        } catch (IOException e) {

            e.printStackTrace();
        } catch (XMLStreamException e) {
            e.printStackTrace();
        } catch (URISyntaxException e) {
            throw new RuntimeException(e);
        }
    }

//    private void testGetSprite(String iconName) {
//        BufferedImage map = new BufferedImage(1024, 1024, BufferedImage.TYPE_INT_ARGB);
//        Graphics2D gMap = map.createGraphics();
//        gMap.setColor(Color.GRAY);
//        gMap.drawRect(0, 0, 1023, 1023);
//        for (int i = 0; i < 1024; i+=32) {
//            gMap.drawLine(0, i,1023, i);
//            gMap.drawLine(i,0, i, 1023);
//        }
//        int iconSize = 64;
//        int x = 512, y = 512;
//
//        try {
//            ImageIO.write(map, "PNG", new File("_tst_map.png"));
//
//            drawIcon(gMap, iconName, iconSize, x, y, true, icons, DRAW_ICON_SPRITE_BUF_SCALE, false);
//
//            ImageIO.write(map, "PNG", new File("_tst_map2.png"));
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
//    }



    public static Path getPathForResource(String resourceName) throws URISyntaxException, IOException {
        Path myPath;
        URI uri = MapBuilder.class.getResource(resourceName).toURI();
        if (uri.getScheme().equals("jar")) {
            FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap());
            myPath = fileSystem.getPath(resourceName);
        } else {
            myPath = Paths.get(uri);
        }
        return myPath;
    }


    public static void writeToFile(String path, String fileName, BufferedImage imgToSave) throws IOException {
        writeToFile(path, fileName, imgToSave, true);
    }
    public static void writeToFile(String path, String fileName, BufferedImage imgToSave, boolean checkExists) throws IOException {
        fileNum++;
        if (!checkExists || !checkFileExists(path, fileName)) {
            lastFileName = fileNum + fileName + ".png";
            File biomesShadow = new File(path + "\\" + lastFileName);
            ImageIO.write(imgToSave, "PNG", biomesShadow);
        } else {
//            fileNum--;
        }

    }


    private Path showFolderChooser(String path) throws IOException {

        JFileChooser chooser = new JFileChooser();
        String generatedWorlds = System.getenv("USERPROFILE")+"\\AppData\\Roaming\\7DaysToDie\\GeneratedWorlds";


        Path libFilders = Path.of("C:\\Program Files (x86)\\Steam\\SteamApps\\libraryfolders.vdf");
        List<String> steamConfigStrings = Files.lines(libFilders).collect(Collectors.toList());
        String currPath = ".";
        for (String steamConfigString : steamConfigStrings) {
            if (steamConfigString.contains("\"path\"")) {
                currPath = steamConfigString.trim().split("\\s+")[1];
                currPath = currPath.substring(1, currPath.length() - 1);
            } else if (steamConfigString.contains("\"251570\"")) { // it's steam game id of 7dtd
                break;
            }
        }

        log("Found steam library: " + currPath);
        String predefinedWorlds = currPath + "\\steamapps\\common\\7 Days To Die\\Data\\Worlds";
//        String predefinedWorlds = "C:\\Program Files (x86)\\Steam\\steamapps\\common\\7 Days To Die\\Data\\Worlds";
        String lookAt = ".";
        if (Files.exists(Path.of(generatedWorlds))) {
            log("Generated worlds found here: " + generatedWorlds);
            lookAt = generatedWorlds;
        } else if (Files.exists(Path.of(predefinedWorlds))) {
            log("Generated worlds not found. But found predefined worlds here: " + predefinedWorlds);
            lookAt = predefinedWorlds;
        }
        chooser.setCurrentDirectory(new java.io.File(lookAt));
        chooser.setDialogTitle("Choose world..");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setPreferredSize(new Dimension(860, 550));

        while (true) {
            String dtmFileName = path + "\\" + DTM_RAW;
            File heightsFile = new File(dtmFileName);
            if (!heightsFile.exists() || !heightsFile.isFile() || !heightsFile.canRead()) {
                System.err.println("File not found: " + dtmFileName);
                if (chooser.showOpenDialog(consoleWindow) == JFileChooser.APPROVE_OPTION) {
                    path = chooser.getSelectedFile().getAbsolutePath();
                } else {
                    System.out.println("No Selection ");
                    try {
                        Thread.sleep(2000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    System.exit(1);
                }
            } else {
                break;
            }
        }
        return Paths.get(path).toAbsolutePath().normalize();
    }


    public static boolean checkFileExists(String path, String fileName) {
        String filePath = path + "\\" + fileNum + fileName + ".png";
        File f = new File(filePath);
        if (!f.exists() || !f.isFile() || !f.canRead()) {
            return false;
        } else {
            log("File already exists: " + fileNum + fileName + ".png");
        }

        return true;
    }

    public static void log(String message) {
        long now = System.currentTimeMillis();
        System.out.println("[+" + (now-prevLogTime)/1000f + "s]: " + message);
        prevLogTime = now;
    }

}
